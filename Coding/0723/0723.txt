### 함수
- 함수
  - 특정 작업을 수행하기 위한 재사용 가능한 코드 묶음
- 함수를 사용하는 이유
  - 재사용성이 높아지고, 코드의 가독성과 유지보수성 향상
- 함수 호출
  - 정의를 하고 밑에서 호출하는 방식
  - 표기법은 function_name(arguments) 형태로 표기함

### 함수 예시
def make_sum(pram1, pram2):
    '''이것은 두 수를 받아
    두 수의 합을 반환하는 함수입니다.
    >>> make_sum(1, 2)
    3
    '''
    return pram1 + pram2

result = make_sum(100, 30)
print(result) -> 130

### 함수 구조
- 함수 정의
  - 함수 정의는 def 키워드로 시작
  - def 키워드 이후 함수 이름 작성
- 함수 body
  - 콜론(:) 다음에 들여쓰기 된 코드 블록
  - 함수가 실행 될 때 수행되는 코드를 정의
  - Docstring : 함수 body 앞에 선택적으로 작성가능한 함수 설명서
- 함수 반환 값
  - 함수는 필요한 경우 결과를 반환할 수 있음
  - return 키워드 이후에 반환할 값을 명시
  - 'return 문은 함수의 실행을 종료함'
    - return 아래에 추가로 문장을 적으면 회색으로 보임
  - 함수 내에서 return 문이 없다면 None이 반환됨
    - return None 을 자동으로 붙이도록 설계됨
- 함수 호출
  - 함수의 이름과 소괄호를 사용해 호출

### 함수와 반환 값
- print() 함수는 반환값이 없음
  - print() 함수는 화면에 값을 `출력`하기만 할 뿐, `반환(return)`값이 없음
  - 출력은 개발자 화면에 값을 보여주는 것이고, 반환은 내부적으로 할당하지만 화면으로 볼수는 없음

return_value = print(1)
print(return_value) -> None

- 출력을 담당하는 함수는 결과를 반환(return)하지 않으므로, 내부적으로 아무 값도 반환하지 않는 함수이므로 None이 나옴

### 매개변수와 인자
- 매개변수
  - 함수를 `정의`할 때, 함수가 받을 값을 나타내는 변수
- 인자
  - 함수를 `호출`할 때, 실제로 전달되는 값

def add_numbers(x, y):
    result = x + y
    return result

a = 2
b = 3

sum_result = add_numbers(a, b)

print(sum_result)

- 위 함수에서 x, y는 매개변수이고, a, b는 인자임

### 다양한 인자 종류
- Positional Arguments (위치 인자)
  - 함수 호출 시 인자의 위치에 따라 전달되는 인자의

def greet(name, age):
    print(f'안녕하세요, {name}님! {age}살이시군요.')

greet('Alice', 25) -> 안녕하세요, Alice님! 25살이시군요.
greet(25, 'Alice') -> 안녕하세요, 25님! Alice살이시군요.
greet('Alice') -> TypeError: greet() missing 1 required positional argument: 'age'

- Default Argument Values (기본 인자 값)
  - 함수 호출 시 인자를 전달하지 않으면, 기본값이 매개변수에 할당됨
  - 기본인자를 미리 세팅해두는 것

def greet(name, age=30):
    print(f'안녕하세요, {name}님! {age}살이시군요.')

greet('Bob') -> 안녕하세요, Bob님! 30살이시군요.
greet('Charlie', 40) -> 안녕하세요, Charlie님! 40살이시군요.

- Keyword Arguments (키워드 인자)
  - 함수 호출 시 인자의 이름과 값을 함께 전달하는 인자
  - 인자의 순서는 중요하지 않으며, 인자의 이름을 명시하여 전달
  - 호출 시 `키워드 인자는 위치 인자 뒤에 위치`해야함
    - 위치 인자가 키워드 인자 뒤에 있으면 error 발생

def greet(name, age):
    print(f'안녕하세요, {name}님! {age}살이시군요.')

greet(age=35, name='Dave') -> 안녕하세요, Dave님! 35살이시군요.
greet(age=35, 'Dave') -> positional argument follows keyword argument

- Arbitrary Argument Lists (임의의 인자 목록)
  - 정해지지 않은 개수의 인자를 처리하는 인자
  - 함수 정의 시 매개변수 앞에 '*'를 붙여서 사용
  - 여러 개의 인자를 tuple로 처리

def calculate_sum(*args):
    print(args) -> 1, 100, 5000, 30
    print(type(args)) -> <class 'tuple'>

calculate_sum(1, 100, 5000, 30)

- Arbitrary Keyword Argument Lists (임의의 키워드 인자 목록)
  - 정해지지 않은 개수의 키워드 인자를 처리하는 인자
  - 함수 정의 시 매개변수 앞에 '**'를 붙여 사용
  - 여러 개의 인자를 dictionary로 묶어 처리

def print_info(**kwargs):
    print(kwargs)

print_info(name='Eve', age=30) -> {'name': 'Eve', 'age': 30}

- 함수 인자 권장 작성 순서
  - 위치 -> 기본 -> 가변 -> 가변 키워드
  - 단, 모든 상황에서 적용되는 절대적인 규칙은 아니며, 상황에 따라 유연하게 조정될 수 있음.

### 재귀 함수
- 재귀 함수
  - 함수 내부에서 자기자신을 호출하는 함수
  - 팩토리얼(n!) 등의 예시가 있음
  - 알고리즘에서 자세히 배울 것

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

print(factorial(5)) -> 120

- 재귀 함수의 특징
  - 특정 알고리즘 식을 표현할 때 변수의 사용이 줄어들며, 코드의 가독성이 높아짐
  - 1개 이상의 base case(종료되는 상황)가 존재하고, 수렴하도록 작성
  - 재귀함수는 메모리 사용량이 많고 느릴 수 있음
  - 종료 조건이 잘못되면 스택 오버플로우 에러가 발생할 수 있으니 주의해야 함
    - 스택 오버플로우 : 작업 공간에 일이 너무 많이 쌓여 프로그램이 멈추는 오류
  - 너무 복잡한 재귀함수는 코드의 가독성을 오히려 저하시킬 수 있음

### 내장 함수
- 내장 함수
  - 파이썬이 기본적으로 제공하는 함수
  - 별도의 import 없이 바로 사용 가능
  - print(), len(), max(), min(), sum() 등 많음

### 함수와 Scope
- Scope(Python의 범위)
  - 함수는 코드 내부에 local scope를 생성하며, 그 외의 공간은 global scope로 구분
  - global scope : 코드 어디에서든 참조할 수 있는 공간
  - local scope : 함수가 만든 scope (함수 `내부`에서만 참조 가능)

def func():
    num = 20
    print('local', num) -> local 20

func()

print('global', num) -> NameError: name 'num' is not defined

- num은 local scope에 존재하기 때문에, global scope에서 사용할 수 없음
  - 변수의 수명주기와 연관

- 변수의 수명주기
  - 변수의 수명주기는 변수가 선언되는 위치와 scope에 따라 결정됨
  - built-in scope, global scope, local scope

- 이름 검색 규칙
  - 파이썬에서 사용되는 이름(식별자)들은 특정한 이름공간에 저장되어 있음
  - 다음 순서로 이름을 찾아나가며, LEGB Rule이라고 부름.
    - Local scope : 지역 범위
    - Enclosed scope : 지역 범위 한 단계 위 범위
    - Global scope : 최상단에 위치한 범위
    - Bulit-in scope : 모든 것을 담고 있는 범위
  - 바깥쪽으로 찾아나가지만, 안쪽으로는 찾지 못함

print(sum) -> <built-in function sum>
print(sum(range(3))) -> 3

sum = 5

print(sum) = 5
print(sum(range(3))) -> TypeError: 'int' object is not callable

  - sum이라는 이름을 global scope에서 사용하면서 기존 built-in scope에 있는 내장함수 sum은 더이상 사용하지 못함
    - sum을 참조 시 global에서 먼저 찾기 때문
  - 이런 상황이 벌어지면 del sum을 입력하여 sum 변수 객체 삭제를 하고 진행할 수 있음

### global 키워드
- 'global' 키워드
  - 변수의 스코프를 전역 범위로 지정하기 위해 사용
  - 일반적으로 함수 내에서 전역 변수를 수정하려는 경우에 사용

num = 0

def increment():
    global num
    num += 1

print(num) -> 0
increment()
print(num) -> 1

  - 주의사항
    - global 키워드 선언 전에 참조 불가
    - 매개변수에는 global 키워드 사용 불가

### 함수 이름 작성 규칙
- 기본 규칙
  - 소문자와 언더스코어(_) 사용
  - 동사로 시작하여 함수의 동작을 설명
    - calculate_total_price(price, tax)
  - 약어 사용 지양
    - calc_price(p, t)  -> 사용 x
  - 이름만으로 `무엇을 하는지`를 명확하게 표현할 것
  - True/False를 반환한다면 is 또는 has로 시작하는 것 추천
    - is_logined()
  - 프로젝트 전체에서 일관성을 지키는 것이 가독성에 도움을 줌

### 단일 책임 원칙
- 단일 책임 원칙
  - 모든 객체는 하나의 명확한 목적과 책임만을 가져야 함
    - 함수 이름으로 그 목적을 명확히 표현
    - 문제가 발생할 때 처리하기 쉬움
  - 함수는 단일한 역할 하나만 하고, 함수 여러개를 사용하는 것이 원칙

### 패킹과 언패킹
- Packing(패킹)
  - 여러 개의 데이터를 하나의 컬렉션으로 모아 담는 과정
  - 한 변수에 콤마(,)로 구분된 값을 넣으면 자동으로 튜플로 처리

def my_func(*args):
    print(args) -> (1, 2, 3, 4, 5)
    print(type(args)) -> <class 'tuple'>

my_func(1, 2, 3, 4, 5)

  - 남는 위치 인자들을 튜플로 묶기
  - *를 붙인 매개변수가 남는 위치 인자들을 모두 모아 하나의 튜플로 만듬
  - **를 붙인 매개변수가 남는 키워드 인자들을 모두 모아 하나의 딕셔너리로 만듬

- Unpacking(언패킹)
  - 컬렉션에 담겨있는 데이터들을 개별 요소로 펼쳐 놓는 과정
  - 리스트나 튜플 앞에 *를 붙여 각 요소를 함수의 개별 위치 인자로 전달
  - 딕셔너리 앞에 **를 붙여 {키: 값} 쌍을 키=값 형태의 키워드 인자로 전달

def my_function(x, y, z):
    print(x, y, z)

names = ['alice', 'jane', 'peter']
my_function(*names) -> alice jane peter

### 참고
- 함수와 반환
  - 파이썬 함수는 언제나 단 하나의 값(객체)만 반환할 수 있음
  - 여러 값을 반환하는 경우에도 하나의 튜플로 패킹하여 반환함
  - 반환된 튜플은 각 변수에 언패킹하여 사용할 수 있음

- 람다 표현식
  - 간단한 연산이나 함수를 한 줄로 표현할 때 사용

def addition(x, y):
    return x + y

lambda x, y: x + y

  - 위 두 함수는 같은 함수임
  - 간단한 함수를 한 줄로 정의할 때 사용
s


