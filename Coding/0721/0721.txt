### Python
- Python을 배우는 이유
  - 세계적으로 거대하고 활발한 커뮤니티를 가지고 있음
    - 2024년도 기준 개발자들이 1년간 가장 많이 쓴 언어 2위 (1위는 JavaScript)
    - Python의 점유율은 최근들어 가파르게 상승중
  - 쉽고 간결한 문법
  - AI, 웹 개발, 데이터 분석 등 광범위한 응용 분야
    - AI와 ML(Machine Learning)에 가장 일반적으로 사용되는 언어
    - 광범위한 라이브러리와 강력한 커뮤니티 지원

### Python 실행
- Python 인터프리터 실행 방법
  - 터미널을 켜고 'python -i'를 입력하면 파이썬 인터프리터 환경 실행
  - 확장자가 .py인 'sample.py' Python파일을 만들고, 터미널에서 `'python sample.py'를 입력 후 실행`
  - 두번째 방법을 주로 사용할 것

### 변수와 메모리
- 변수
  - 값을 나중에 `다시 사용하기 위해`, 그 값에 붙여주는 고유한 이름
  - `객체를 가리키는 이름`
- 변수 할당
  - 표현식이 만들어 낸 값에 이름을 붙이는 과정
- 할당문
  - '값 36.5을 변수 degrees에 할당했다.'
  - degrees = 36.5
- 변수명의 규칙
  - 영문 알파벳, 언더스코어(_), 숫자로 구성됨
  - 숫자로 시작할 수 없음
  - 대소문자가 구분됨
  - 내부예약어(True, False, if, while 등)는 사용 불가
- 메모리
  - 메모리의 모든 위치에는 그 위치를 고유하게 식별하는 메모리 주소가 존재
  - 고유한 ID(주소), 타입, 값을 묶어서 객채(Object)라고 부름
  - 변수는 특정 객채를 가르키는 이름표 역할이지, 메모리 주소를 가지지는 않음
- 할당문 동작 순서
  - 왼쪽 변수명 확인
    - 이름이 처음 사용되었다면 : 새로운 '이름표' 준비
    - 이미 존재하는 이름이라면 : 기존 '이름표'를 그대로 사용
- 재할당
  - 이미 값이 할당된 변수에 새로운 값을 다시 할당하는 것
  - 변수가 가리키는 대상을 새로운 값으로 변경하는 행위
    - 재할당이 이루어지면, 변수는 이전 값을 완전히 잊고 새로운 값만 기억하게 됨

### Data Types
- 타입
  - 변수나 값이 가질 수 있는 데이터의 종류를 의미

### Numeric Types(숫자형 데이터)
- int(정수 자료형)
  - `소수점이 없는 숫자`를 표현
    - student_count = 30
    - temperature = -5
    - balance = 0
- float(실수 자료형)
  - `소수점이 있는` 더 정밀한 숫자를 표현
    - pi = 3.14
    - weight = 65.5
    - tax_rate = 0.1
  - 지수 표현법
    - 'e' 또는 'E'를 사용
    # 1,230,000,000 (1.23 * 10^9)
    - big_number = 1.23e9
    # 0.00314 ( 3.14 * 10^-3)
    - small_number = 3.14e-3
- 숫자형의 '행동' - 산술 연산
  - +, -, *, / : 사칙연산
  - // : 몫 나눗셈
  - % : 나머지
  - ** : 거듭제곱
- 연산자 우선순위
  - 지수(**) -> 음수부호 -> 곱셈, 나눗셈, 몫 나눗셈, 나머지 -> 덧셈, 뺄셈
  - 순서가 헷갈릴 때는 소괄호 '()'를 사용하여 원하는 연산을 먼저 수행하도록 명시
    - -2 ** 4 = -16
    - -(2 ** 4) = -16
    - (-2) ** 4 = 16

### Sequence Types
- Sequence Types
  - str, list, tuple, range 등
- 시퀀스 타입의 5가지 공통 특징
  - 순서 : 값들이 정렬되지 않고 순서대로 저장
  - 인덱싱(Indexing) : 각 값에 고유번호(인덱스)를 가지고 있고, 인덱스를 사용하여 특정 위치의 값을 선택하거나 수정 가능
  - 슬라이싱 : 인덱스 범위를 조절해 전체 데이터 중 원하는 부분만 잘라내서 사용 가능
  - 길이 : len() 함수를 사용하여 저장된 값의 개수(길이)를 구할 수 있음
  - 반복 : 반복문을 사용하여 각 값을 하나씩 순서대로 사용할 수 있음
- str(문자열)
  - 문자들의 순서가 있는, `변경 불가능한` 시퀀스 자료형
  - 따옴표 활용(작은따옴표, 큰따옴표 상관 X)
      - 'Hello, World!'
    - 따옴표 안에 다른 따옴표를 넣고 싶을때는 다른 종류로 사용
      - 'Jack says "Hi".'
    - 따옴표 앞에 \을 붙여 문자로 인식시킴
      - 'He\'s a boy.'
    - 여러 줄 문자열을 작성할 때는 """ 또는 '''를 사용
  - 이스케이프 시퀀스
    - \n : 줄 바꿈
    - \t : 탭
    - \\ : 백슬래시 입력
    - \' : 작은 따옴표
    - \" : 큰 따옴표
- f-string
  - 문자열에 값 삽입하기
  - 문자열 시작 전 'f' 접두어를 붙이고, 삽입할 부분을 중괄호 {}로 감싸줌
'''
name = '홍길동'
age = 25

greeting = f'안녕하세요, 제 이름은 {name}이고 나이는 {age}살입니다.'

# 안녕하세요, 제 이름은 홍길동이고 나이는 25살입니다.
print(greeting)
'''

### 시퀀스로서의 문자열
- 인덱스
  - 시퀀스 자료형에서 각 값의 위치를 식별하기 위해 부여된 고유한 번호
  - 인덱스는 1부터 시작이 아닌 `0부터 시작`
    - 인덱스는 '시작점으로부터 얼마나 떨어져 있는가를 의미'하기 때문
    - index 0은 '첫번째 항목'을 의미함
  - 파이썬은 음수 인덱스를 지원함
    - -1은 맨 마지막 값을 의미하며, -2는 마지막에서 두번째 값을 가리킴
    - 마지막 요소를 확인할 때 편리
- 슬라이싱
  - 시작 인덱스와 끝 인덱스를 지정하여 해당 범위의 값을 포함하는 새로운 시퀀스를 생성
  - 대괄호 []안에 시작 위치, 끝 위치, 간격을 콜론(:)으로 구분
    - my_sequence[start:stop:step]
    - start, stop, step 값은 필요에 따라 생략가능
    - start는 포함되지만, stop는 포함되지 않음
'''
my_str = 'hello'

# ll
my_str[2:4] 

# hel
my_str[:3]

# lo
my_str[3:]

# hlo
my_str[::2]

# olleh
my_str[::-1]
'''

### 문자열의 불변성
'''
my_str = 'Hello'

my_str[1] = 'a'

-> TypeError : 'str' object does not support item assignment
'''
- 1번 인덱스의 'e'를 'a'로 바꾸려는 시도 -> 실패
- 기존 문자열의 일부와 새로운 값을 조합하여 새로운 문자열을 만들어야 함
'''
my_str = 'Hello'

new_str = my_str[0] + 'a' + my_str[2:]

# Hallo
print(new_str)
'''
- my_str = 'Hallo'로 작성하면?
  - 이것은 my_str을 변경한 것이 아니라 새로운 값으로 `재할당`한 것!

## 참고
### 정수형의 진법 표현
- 10진법 숫자 앞에 접두사(prefix)를 붙여서 사용
  - 2진수 : 0b
  - 8진수 : 0o
  - 16진수 : 0x
  - print(0o30) = 24

### 부동소수점 오차
'''
result = 0.1 + 0.2

# False
print(result == 0.3)

# 0.30000000000000004
print(result)
'''
- 발생원인
  - 컴퓨터는 2진법을 사용
    - 컴퓨터는 모든 숫자를 0과 1로 이루어진 2진수로 변환하여 저장
  - 무한 소수의 발생과 근사값 저장
    - 0.1같은 우리가 쓰는 10진수 소수 중 일부는 2진수로 바꾸면 무한소수가 됨.
    - 0.1(10진수) -> 0.0001100110011... (2진수)
  - 이 근사치 때문에 미세한 오차가 발생하고, 문제가 발생함
- 대표적으로 decimal 모듈을 사용해 부동소수점 연산의 정확성을 보장할 수 있음
  - decimal은 실수를 2진수로 변환하지 않고, 10진수 자체로 정확하게 연산하게 해줌
- 이외에도 다양한 해결방법이 존재함
  - 자세한 것은 추후에 학습

### 표현식과 문장
- 표현식 vs 문장
  - '이 코드를 실행하면, 하나의 값이 남나요?'
  - 표현식 -> 네
    - 10 + 20 -> 값 30이 남음
  - 문장 -> 아니오
    - name = 홍길동 -> 값을 변수에 할당하라는 지시

### Style Guide
- 코드의 일관성과 가독성을 향상시키기 위한 규칙과 권장사항
  - 여러 사람이 함께 작업하거나, 미래의 내가 쉽게 알아볼 수 있도록
  - 파이썬에서는 PEP 8이 가장 대표적인 스타일 가이드임
- PEP 8
  - 변수명은 직관적인 이름으로 짓기(student, number_of_student 등)
  - 공백(spaces) 4칸을 사용하여 코드 블록을 들여쓰기
  - 한 줄의 길이는 79자로 제한
  - 문자와 밑줄(_)을 사용하여 함수, 변수, 속성의 이름을 작서어
  - 이외에도 많은 규칙이 존재함

### 주석
- 프로그램 코드 내에 작성되는 설명이나 메모리
- 주석처리하고싶은 곳을 ctrl+/ 하면 주석이 됨
  - '#' 기호를 사용해서도 주석 가능
  

