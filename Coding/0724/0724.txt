### 모듈
- 모듈
  - 한 파일로 묶인 변수와 함수의 모음
  - 특정한 기능을 하는 코드가 작성된 파이썬 파일(.py)
- 모듈 예시

import math
print(math.pi) -> 3.1415926535897
print(math.sqrt(4)) -> 2.0

### 모듈 활용
- import문 사용
  - 같은 이름의 함수가 여러 모듈에 있을 때 충돌을 방지할 수 있음
  - '.(dot)' 연산자

print(math.pi)

  - '모듈명.변수명'의 형태로 사용
- from 절 사용

from math import pi, sqrt
print(pi)
print(sqrt(4))

  - 짧고 간결하게 코드 사용
  - 정의된 모듈의 위치를 알기 어려워 명시적이지 않음
  - 사용자가 선언한 변수 또는 함수와 겹치게 된다면 제대로 동작이 이루어지지 않음
  - 서로 다른 모듈에서 import된 변수나 함수의 이름이 같은 경우 이름이 출돌함

from math import sqrt
from my_math import sqrt
result = sqrt(9) -> math.sqrt가 아닌, my_math.sqrt가 사용됨

- 다음과 같은 이유때문에 form 절 보다는 import 문을 자주 사용함

- as 키워드
  - 두 개 이상의 모듈에서 동일한 이름의 변수, 함수 클래스 등을 가져올 때 충돌을 해결가능

from math import sqrt
from my_math import sqrt as my_sqrt

sqrt(4)
my_sqrt(4) -> my_math에서 사용

  - import되는 함수나 변수명이 너무 길거나 자주 사용할 때 쉽게 사용 가능

import pandas as pd
import matplotlib.pyplot as plt

df = pd.DafaFrame()
plt.plot(x, y)

### 사용자 정의 모듈
- 사용자 정의 모듈
  - my_math.py 생성하여 함수를 작성
  - 같은 위치에 sample.py 파일을 생성하고 my_math 모듈의 add 함수 import 후 호출 가능

### 파이썬 표준 라이브러리
- 파이썬 표준 라이브러리
  - 파이썬 언어와 함께 제공되는 다양한 모듈과 패키지의 모음

### 패키지
- 패키지
  - 연관된 모듈들을 하나의 디렉토리에 모아 놓은 것
  - 여러 기능을 쉽게 사용할 수 있도록 도와주는 역할

from my_package.math import my_math
from my_package.statistics import tools

  - my_package 폴더 안의 math 폴더에 있는 my_math.py 모듈을 호출함
  - my_package 폴더 안의 statistics 폴더에 있는 tools.py 모듈을 호출함
  - 같은 경로에 있는 폴더에서 불러오기 시작
- pip
  - 외부 패키지들을 설치하도록 도와주는 파이썬의 패키지 관리 시스템
  - https://pypi.org
- 패키지 설치
  - 최신 버전 / 특정 버전 / 최소 버전을 명시하여 설치 가능

pip install SomePackage -> 최신 버전 설치
pip install SomePackage == 1.0.5 -> 특정 버전 설치

 - requests 외부 패키지
   - 파이썬에서 웹에 요청을 보내고 응답을 받는 것을 아주 쉽게 만들어주는 외부 패키지
   - api 활용에서 필수적인 패키지

pip install requests

### 제어문
- 제어문
  - 코드의 실행 흐름을 제어하는 데 사용되는 구문
  - 조건에 따라 코드 블록을 실행하거나 반복적으로 코드를 실행

### 조건문
- 조건문
  - 주어진 조건식을 평가하여 해당 조건이 참(True)인 경우에만 코드 블록을 실행하거나 건너뜀
- 조건문의 기본 구조
  - if, elif, else
  - elif
    - 이전의 조건을 만족하지 못하고 추가로 다른 조건이 필요할 때 사용
    - 여러개를 사용 가능
  - else
    - 모든 조건을 만족하지 않을 때 실행
- 복수 조건문
  - 조건식을 순차적으로 비교하기 때문에, 순서에 따라 원하는 결과가 나오지 않을 수 있음
- 중첩 조건문
  - if 내부에 또 다른 if 작성 가능

### 반복문
- 반복문
  - 주어진 코드 블록을 여러 번 반복해서 실행하는 구문
- for문
  - 반복 가능한 객체의 요소들을 반복하는데 주로 사용
  - 반복 횟수가 정해져 있음

student_list = ['Alice', 'Bob', 'Charlie']

for student in student_list:
    print(f'Hello, {student}!')

- while문
  - while 조건이 참(True)인 동안 반복
  - 반복 횟수가 정해지지 않은 경우에 주로 사용
  - 무한 반복에 주의할 것

### for statement
- for 반복문
  - 반복 가능한 객체의 요소 개수만큼 반복이 수행됨

for item in item_list

  - item의 자리에는 단수형이, item_list에는 복수형의 이름을 주로 사용함

- 문자열 순회
  - 문자열은 문자로 구성된 시퀀스 자료형임
  - 문자가 반복 변수에 할당되어 반복 수행

country = 'Korea'
for char in country:
    print(char)
->
'''
K
o
r
e
a
'''

- range 순회
  - 특정 숫자 범위만큼 반복을 하고 싶을 때 사용

for i in range(5):
    print(i)
->
'''
0
1
2
3
4
'''

- 딕셔너리 순회
  - dict 자료형은 비시퀀스 자료형으로, 순서가 보장되지 않음에 주의할 것
- 인덱스로 리스트 순회
  - 리스트의 요소가 아닌 인덱스로 접근하여 요소들을 변경하는 방법

numbers = [4, 6, 10, -8, 5]
for i in range(len(numbers)):
    numbers[i] = numbers[i] * 2

print(numbers) -> [8, 12, 20, -16, 10]

- 중첩된 반복문

outers = ['A', 'B']
inners = ['c', 'd']

for outer in outers:
    for inner in ineers:
        print(outer, inner)
->
'''
A c
A d
B c
B d
'''

- 중첩 리스트 순회

elements = [['A', 'B'], ['c', 'd']]

for elem in elements:
    for item in elem:
        print(item)
->
'''
A
B
c
d
'''

### while statement
- while
  - 조건식이 참(True)일 동안 코드를 반복하여 실행
  - 조건식이 거짓(False)이 될 때 까지 반복해서 실행

a = 0

while a < 3:
    print(a)
    a += 1

print('끝')
->
'''
0
1
2
끝
'''

  - 반드시 종료 조건이 필요함!
    - 예상치 못한 상황에 대비해 break문을 활용하면 안전하게 종료할 수 있음
  - wile문을 시작하기 전에 조건에서 사용한 변수를 초기화해야 오류 방지 가능

### 반복 제어
- break 키워드
  - break 키워드를 만나게 되면 남은 코드를 무시하고 반복 즉시 종료

for i in range(10):
    if i == 5:
        break
    print(i) -> 0 1 2 3 4

- continue 키워드
  - continue 키워드를 만나게 되면 continue 아래의 코드는 무시하고 다음 반복을 수행함

for i in range(10):
    if i % 2 == 0:
        continue
    print(i) -> 1 3 5 7 9

- pass 키워드
  - '아무 동작도 하지 않음'을 명시적으로 나타내는 키워드
  - 구조의 안정성을 위해 만들어놓는 용도로 사용
  - 나중에 추가할 내용이 있을 때 사용함

# 유용한 내장 함수
- map 함수
  - map(function, iterable) 의 구조
  - 반복 가능한 데이터구조(iterable)의 모든 요소에 function을 적용하고, 그 결과값을 map object로 묶어서 반환
    - 전체 값을 확인하려면 list나 tuple으로 형변환을 해주어야 함

numbers = [1, 2, 3]
result = map(str, numbers)

print(result) -> <map object at 0x00~>
print(list(result)) -> ['1', '2', '3']

- zip 함수
  - 여러 개의 반복 가능한 데이터 구조를 묶어서, 같은 위치에 있는 값들을 하나의 tuple로 만들어서 모아서 반환하는 함수

### 참고
- for-else문
  - for 루프가 break를 만나 중단되지 않고, 끝까지 정상적으로 가면 else 블록이 실행됨
- enumerate 함수
  - iterable 객체의 각 요소에 대해 인덱스와 값을 함께 반환하는 내장함수
  - enumerate의 index 정보를 이용해 넘버링으로 사용

movies = ['인터스텔라', '기생충', '인사이드 아웃', '라라랜드']

for idx, title in enumerate(movies, start=1):
    print(f'{idx}위: {title}')
->
'''
1위: 인터스텔라
2위: 기생충
3위: 인사이드 아웃
4위: 라라랜드
'''

